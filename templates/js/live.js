// Generated by CoffeeScript 1.7.1
var create_header, format_game_time, format_supply, game_id, graphs, load_completed, load_graphs, load_header, load_live_content, refresh_data, refresh_graphs, refresh_header, setup_chart_menu, update_header, update_timer, zeroes;

Array.prototype.last = function() {
  return this[this.length - 1];
};

graphs = {
  minerals_income: {
    title: "Mineral income",
    allow_diff: true
  },
  minerals_gathered: {
    title: "Total minerals gathered",
    allow_diff: true
  },
  gas_income: {
    title: "Gas income",
    allow_diff: true
  },
  gas_gathered: {
    title: "Total gas gathered",
    allow_diff: true
  },
  supply_current: {
    title: "Current supply",
    allow_diff: false
  }
};

game_id = -1;

update_timer = void 0;

zeroes = function(val, n) {
  var s;
  if (n == null) {
    n = 2;
  }
  s = "" + val;
  while (s.length < n) {
    s = "0" + s;
  }
  return s;
};

format_game_time = function(time) {
  var out;
  out = "";
  if (time > 3600) {
    out += "" + (Math.floor(time / 3600)) + ":";
    time = time % 3600;
  }
  return out + ("" + (zeroes(Math.floor(time / 60))) + ":" + (zeroes(time % 60)));
};

load_live_content = function() {
  game_id = $("#live_content").attr("data-game-id");
  return $.getJSON("/live/get/livestats/?id=" + game_id, load_completed);
};

load_completed = function(data) {
  $("#live_content").empty();
  load_header(data);
  setup_chart_menu();
  load_graphs(data);
  return update_timer = setInterval(refresh_data, 1000);
};

load_graphs = function(data) {
  var diff_data, graph, graph_id, player_1_data, player_2_data, series, stats, x, _results;
  stats = data.stats;
  _results = [];
  for (graph_id in graphs) {
    graph = graphs[graph_id];
    $("#live_content").append("<div id='live_" + graph_id + "' class='live-chart'></div>");
    player_1_data = (function() {
      var _i, _len, _results1;
      _results1 = [];
      for (_i = 0, _len = stats.length; _i < _len; _i++) {
        x = stats[_i];
        _results1.push([x[0]["game_time"], x[0][graph_id]]);
      }
      return _results1;
    })();
    player_2_data = (function() {
      var _i, _len, _results1;
      _results1 = [];
      for (_i = 0, _len = stats.length; _i < _len; _i++) {
        x = stats[_i];
        _results1.push([x[0]["game_time"], x[1][graph_id]]);
      }
      return _results1;
    })();
    series = [
      {
        id: "pla",
        name: data.pla.tag,
        data: player_1_data,
        linkedTo: "plb",
        showInLegend: true
      }, {
        id: "plb",
        name: data.plb.tag,
        data: player_2_data,
        linkedTo: "pla",
        showInLegend: true
      }
    ];
    if (graph.allow_diff) {
      diff_data = (function() {
        var _i, _len, _results1;
        _results1 = [];
        for (_i = 0, _len = stats.length; _i < _len; _i++) {
          x = stats[_i];
          _results1.push([x[0]["game_time"], x[1][graph_id] - x[0][graph_id]]);
        }
        return _results1;
      })();
      series.push({
        name: "Difference",
        data: diff_data
      });
    }
    _results.push($("#live_" + graph_id).highcharts({
      title: {
        text: graph.title
      },
      chart: {
        animation: false
      },
      exporting: {
        enabled: false
      },
      legend: {
        enabled: false
      },
      tooltip: {
        crosshairs: true,
        formatter: function() {
          var p, ret, _i, _len, _ref;
          ret = "<small>" + (format_game_time(this.x)) + "</small> <table>";
          _ref = this.points;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            series = p.series;
            ret += "<tr><td> <span style='color: " + series.color + "'> " + series.name + " </span></td><td><b>" + p.y + "</b></td></tr>";
          }
          return ret + "</table>";
        },
        shared: true,
        useHTML: true
      },
      xAxis: {
        labels: {
          formatter: function() {
            return format_game_time(this.value);
          }
        }
      },
      plotOptions: {
        series: {
          marker: {
            enabled: false
          }
        }
      },
      series: series
    }));
  }
  return _results;
};

load_header = function(data) {
  create_header();
  if (data.stats[0] != null) {
    return update_header(data);
  }
};

setup_chart_menu = function() {
  var get_linked_chart_div, get_linked_chart_id, graph_id;
  get_linked_chart_div = function(el) {
    return $("#live_" + (get_linked_chart_id(el)));
  };
  get_linked_chart_id = function(el) {
    return $(el).attr("data-chart");
  };
  $("#live_content").append("<div id='live_chart_menu'></div>");
  for (graph_id in graphs) {
    $("#live_chart_menu").append("<div class='live-menu-item' data-chart='" + graph_id + "'></div>");
  }
  $(".live-menu-item").each(function() {
    var graph;
    graph = get_linked_chart_id(this);
    return $(this).append("<div class='live-menu-button-toggle'>" + graphs[graph].title + "</div>");
  });
  return $(".live-menu-button-toggle").click(function() {
    return $("#live_" + (get_linked_chart_id(this.parentElement))).toggle();
  });
};

refresh_data = function() {
  return $.getJSON("/live/get/livestats/?id=" + game_id + "&latest=1", function(data) {
    refresh_graphs(data.stats);
    return refresh_header(data);
  });
};

refresh_graphs = function(stats) {
  var graph_id, series, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = graphs.length; _i < _len; _i++) {
    graph_id = graphs[_i];
    series = $("#live_" + graph_id).highcharts().series;
    if (stats[0][0] != null) {
      series[0].addPoint([stats[0][0]["game_time"], stats[0][0][graph_id]]);
    }
    if (stats[0][1] != null) {
      _results.push(series[1].addPoint([stats[0][1]["game_time"], stats[0][1][graph_id]]));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

refresh_header = function(data) {
  if (data.stats[0] != null) {
    return update_header(data);
  }
};

create_header = function() {
  return $("#live_content").append("<div id='live_header'></div>");
};

format_supply = function(current, cap) {
  var supply_string;
  supply_string = "" + current + "/" + cap;
  if (current > cap) {
    return "<span class='supply-capped'>" + supply_string + "</span>";
  } else {
    return supply_string;
  }
};

update_header = function(data) {
  var last_stat, pl1_supply, pl2_supply, timer;
  last_stat = data.stats.last();
  pl1_supply = format_supply(last_stat[0].supply_current, last_stat[0].supply_cap);
  pl2_supply = format_supply(last_stat[1].supply_current, last_stat[1].supply_cap);
  timer = format_game_time(last_stat[0].game_time);
  return $("#live_header").html("<div class='live-player'> <div class='live-player-top-row'> <a href='/players/" + data.pla.id + "'> " + data.pla.tag + " </a> <div class='live-supply'>" + pl1_supply + "</div> </div> <div class='live-player-bottom-row'> <div class='live-minerals'>" + last_stat[0].minerals_current + "</div> <div class='live-gas'>" + last_stat[0].gas_current + "</div> </div> </div> <div class='live-timer'>" + timer + "</div> <div class='live-player'> <div class='live-player-top-row'> <div class='live-supply'>" + pl2_supply + "</div> <a href='/players/" + data.plb.id + "'> " + data.plb.tag + " </a> </div> <div class='live-player-bottom-row'> <div class='live-gas'>" + last_stat[1].gas_current + "</div> <div class='live-minerals'>" + last_stat[1].minerals_current + "</div> </div> </div>");
};
